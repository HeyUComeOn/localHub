/****************************************************************************
Copyright (c) 2008-2010 Ricardo Quesada
Copyright (c) 2010-2012 cocos2d-x.org
Copyright (c) 2011      Zynga Inc.
Copyright (c) 2013-2014 Chukong Technologies Inc.
 
http://www.cocos2d-x.org

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
 ****************************************************************************/
package org.cocos2dx.cpp;

import org.cocos2dx.lib.Cocos2dxActivity;
import org.json.JSONException;
import org.json.JSONObject;

import android.content.Intent;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Toast;

import com.qihoo.gamecenter.sdk.common.IDispatcherCallback;
import com.qihoo.gamecenter.sdk.protocols.pay.ProtocolConfigs;
import com.qihoo.gamecenter.sdk.protocols.pay.ProtocolKeys;
import com.qihoopay.insdk.activity.ContainerActivity;
import com.qihoopay.insdk.matrix.Matrix;
import com.test.sdk.activity.SdkUserBaseActivity;
import com.test.sdk.appserver.QihooUserInfo;
import com.test.sdk.appserver.QihooUserInfoListener;
import com.test.sdk.appserver.QihooUserInfoTask;
import com.test.sdk.appserver.TokenInfo;
import com.test.sdk.appserver.TokenInfoListener;
import com.test.sdk.appserver.TokenInfoTask;
import com.test.sdk.common.SdkAccountListener;

public class AppActivity extends Cocos2dxActivity implements
		SdkAccountListener, TokenInfoListener, QihooUserInfoListener {

	
	private static final String TAG = "AppActivity";

	private TokenInfoTask mTokenTask;
	private QihooUserInfoTask mUserInfoTask;
	
	//for cocos2dx to use
	private static AppActivity instance = new AppActivity();
    public static Object getObj()
    {
        return instance;
    }

    public void login()
    {
    	
        doSdkLogin(false,true);
    }

    
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// 在父类中率先实现了AppDelegate
		super.onCreate(savedInstanceState);
		Matrix.init(this, false, new IDispatcherCallback() {
			@Override
			public void onFinished(String data) {
				// TODO your job
				 Log.d(TAG, "matrix startup callback,result is " + data);
			}
		});
		doSdkLogin(false,true);
	}

	protected void doSdkLogin(boolean isLandScape, boolean isBgTransparent) {

		Intent intent = getLoginIntent(isLandScape, isBgTransparent);

		Matrix.invokeActivity(this, intent, mLoginCallback);
	}

	/***
	 * * 生成调用360SDK登录接口的Intent * * @param isLandScape 是否横屏 * @param
	 * isBgTransparent 是否背景透明 * @return Intent
	 */
	// private Intent getLoginIntent(boolean isLandScape, boolean
	// isBgTransparent) {
	// return getLoginIntent(isLandScape, isBgTransparent);
	// }

	/***
	 * 生成调用360SDK登录接口的Intent
	 * 
	 * @param isLandScape
	 *            是否横屏
	 * @param isBgTransparent
	 *            是否背景透明
	 * @param appKey
	 *            应用或游戏的AppKey
	 * @param appChannel
	 *            应用或游戏的自定义子渠道
	 * @return Intent
	 */
	private Intent getLoginIntent(boolean isLandScape, boolean isBgTransparent) {
		Bundle bundle = new Bundle(); // 界面相关参数，360SDK界面是否以横屏显示。
		bundle.putBoolean(ProtocolKeys.IS_SCREEN_ORIENTATION_LANDSCAPE,
				isLandScape);
		// 界面相关参数，360SDK登录界面背景是否透明。
		bundle.putBoolean(ProtocolKeys.IS_LOGIN_BG_TRANSPARENT, isBgTransparent);
		// *** 以下非界面相关参数 ***
		// 必需参数，使用360SDK的登录模块。
		bundle.putInt(ProtocolKeys.FUNCTION_CODE,
				ProtocolConfigs.FUNC_CODE_LOGIN);
		Intent intent = new Intent(this, ContainerActivity.class);
		intent.putExtras(bundle);
		return intent;
	}

	// 登录、注册的回调
	private IDispatcherCallback mLoginCallback = new IDispatcherCallback() {
		@Override
		public void onFinished(String data) {
			Log.d(TAG, "mLoginCallback, data is " + data);
			
			String authorizationCode = parseAuthorizationCode(data);;
			onGotAuthorizationCode(authorizationCode);

		}
	};
	
	/**
     * 从Json字符中获取授权码
     *
     * @param data Json字符串
     * @return 授权码
     */
    private String parseAuthorizationCode(String data) {
        String authorizationCode = null;
        if (!TextUtils.isEmpty(data)) {
            boolean isCallbackParseOk = false;
            try {
                JSONObject json = new JSONObject(data);
                int errCode = json.getInt("errno");
                if (errCode == 0) {
                    // 只支持code登陆模式
                    JSONObject content = json.getJSONObject("data");
                    if (content != null) {
                        // 360SDK登录返回的Authorization Code（授权码，60秒有效）。
                        authorizationCode = content.getString("code");
                        isCallbackParseOk = true;
                    }
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }

//            // 用于测试数据格式是否异常。
//            if (!isCallbackParseOk) {
//                Toast.makeText(SdkUserBaseActivity.this, getString(R.string.data_format_error),
//                        Toast.LENGTH_LONG).show();
//            }
        }
        Log.d(TAG, "parseAuthorizationCode=" + authorizationCode);
        return authorizationCode;
    }
	private static final String AUTH_CODE = "code";

	@Override
	public void onGotAuthorizationCode(String code) {

		mTokenTask = TokenInfoTask.newInstance();

		// 请求应用服务器，用AuthorizationCode换取AccessToken
		mTokenTask.doRequest(this, code, Matrix.getAppKey(this), this);

	}

	@Override
	public void onGotError(int errCode) {
		// TODO Auto-generated method stub

	}

	@Override
	public void onGotUserInfo(QihooUserInfo userInfo) {

	        if (userInfo != null && userInfo.isValid()) {
	        	Toast.makeText(this, "登录成功", Toast.LENGTH_LONG).show();
	        	//StartGame.startGame();
	        } else {
	            Toast.makeText(this, "登录失败", Toast.LENGTH_LONG).show();
	        }

	}

	@Override
	public void onGotTokenInfo(TokenInfo tokenInfo) {

		mUserInfoTask = QihooUserInfoTask.newInstance();
		// 界面显示AccessToken

		// 请求应用服务器，用AccessToken换取UserInfo
		mUserInfoTask.doRequest(this, tokenInfo.getAccessToken(),
				Matrix.getAppKey(this), this);
	}

}