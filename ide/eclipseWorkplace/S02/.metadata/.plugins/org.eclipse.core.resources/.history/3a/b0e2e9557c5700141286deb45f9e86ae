package com.mitsui.game;

import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnCancelListener;
import android.content.pm.ActivityInfo;
import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import com.qihoo.gamecenter.sdk.common.IDispatcherCallback;
import com.qihoopay.insdk.matrix.Matrix;
import com.test.sdk.Constants;
import com.test.sdk.R;
import com.test.sdk.activity.SdkUserBaseActivity;
import com.test.sdk.appserver.QihooUserInfo;
import com.test.sdk.appserver.QihooUserInfoListener;
import com.test.sdk.appserver.QihooUserInfoTask;
import com.test.sdk.appserver.TokenInfo;
import com.test.sdk.appserver.TokenInfoListener;
import com.test.sdk.appserver.TokenInfoTask;
import com.test.sdk.utils.ProgressUtil;


public class StartActivity extends SdkUserBaseActivity implements TokenInfoListener, QihooUserInfoListener{

	private static final String TAG = "SdkShowAllActivity";

    private TextView mLoginResultView;

    private ProgressDialog mProgress;

    private TokenInfo mTokenInfo;

    private QihooUserInfo mQihooUserInfo;

    private boolean mIsLandscape;

    private TokenInfoTask mTokenTask;
    private QihooUserInfoTask mUserInfoTask;
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
    	
    	super.onCreate(savedInstanceState);
    	
    	Intent intent = getIntent();
        mIsLandscape = intent.getBooleanExtra(Constants.IS_LANDSCAPE, true);
        setRequestedOrientation(mIsLandscape ? ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE
                : ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

        mTokenInfo = TokenInfo.parseJson(intent.getStringExtra(Constants.TOKEN_INFO));
        mQihooUserInfo = QihooUserInfo.parseJson(intent.getStringExtra(Constants.QIHOO_USER_INFO));

        setContentView(R.layout.sdk_show_all_activity);

        if (savedInstanceState == null) {
            // 初始化
            Matrix.init(this, false, new IDispatcherCallback() {
                @Override
                public void onFinished(String data) {
                    Log.d(TAG, "matrix startup callback,result is " + data);
                }
            });
        }
    	
    }
    
	@Override
	public void onGotAuthorizationCode(String code) {
		
		if (TextUtils.isEmpty(code)) {
            Toast.makeText(this, R.string.get_code_fail, Toast.LENGTH_LONG).show();
        } else {
            clearLoginResult();
            mTokenTask = TokenInfoTask.newInstance();
            // 提示用户进度
            mProgress = ProgressUtil.show(this, R.string.get_token_title,
                    R.string.get_token_message, new OnCancelListener() {

                        @Override
                        public void onCancel(DialogInterface dialog) {
                            if (mTokenTask != null) {
                                mTokenTask.doCancel();
                            }
                        }
                    });

            // 请求应用服务器，用AuthorizationCode换取AccessToken
            mTokenTask.doRequest(this, code, Matrix.getAppKey(this), this);
        }
	}

	@Override
	public void onGotError(int errCode) {
		
		clearLoginResult();
	}

	@Override
	public void onGotUserInfo(QihooUserInfo userInfo) {

		ProgressUtil.dismiss(mProgress);

        if (userInfo != null && userInfo.isValid()) {
            // 保存QihooUserInfo
            mQihooUserInfo = userInfo;

            // 界面显示QihooUser的Id和Name
           
            Intent intent = getIntent();
            intent.putExtra(Constants.TOKEN_INFO, mTokenInfo.toJsonString());
            intent.putExtra(Constants.QIHOO_USER_INFO, mQihooUserInfo.toJsonString());

        } else {
            Toast.makeText(this, R.string.get_user_fail, Toast.LENGTH_LONG).show();
        }
		
	}

	@Override
	public void onGotTokenInfo(TokenInfo tokenInfo) {

		 if (tokenInfo == null || TextUtils.isEmpty(tokenInfo.getAccessToken())) {
	            ProgressUtil.dismiss(mProgress);
	            Toast.makeText(this, R.string.get_token_fail, Toast.LENGTH_LONG).show();
	        } else {
	            // 保存TokenInfo
	            mTokenInfo = tokenInfo;
	            mUserInfoTask = QihooUserInfoTask.newInstance();
	            // 界面显示AccessToken
	            //updateUserInfoUi();

	            // 提示用户进度
	            ProgressUtil.setText(mProgress, getString(R.string.get_user_title),
	                    getString(R.string.get_user_message), new OnCancelListener() {

	                        @Override
	                        public void onCancel(DialogInterface dialog) {
	                            if (mUserInfoTask != null) {
	                                mUserInfoTask.doCancel();
	                            }
	                        }
	                    });

	            // 请求应用服务器，用AccessToken换取UserInfo
	            mUserInfoTask.doRequest(this, tokenInfo.getAccessToken(), Matrix.getAppKey(this),
	                    this);
	        }
		
	}
	
	 private void clearLoginResult() {
	        mTokenInfo = null;
	        mQihooUserInfo = null;
	        //updateUserInfoUi();
	    }

}
